// Generated by CoffeeScript 1.10.0
(function() {
  var browserSync, changed, data, del, gulp, hmlRoot, image, inlineCss, jade, notify, path, paths, plumber, prodRoot, sourceRoot, stylus;
  gulp = require("gulp");
  del = require("del");
  path = require("path");
  browserSync = require("browser-sync");
  changed = require("gulp-changed");
  jade = require("gulp-jade");
  data = require("gulp-data");
  stylus = require("gulp-stylus");
  inlineCss = require("gulp-inline-css");
  image = require("gulp-image");
  plumber = require("gulp-plumber");
  notify = require("gulp-notify");
  sourceRoot = "./source/";
  hmlRoot = "./hml/";
  prodRoot = "./prod/";
  paths = {
    source: {
      jade: sourceRoot + "/jade/",
      stylus: sourceRoot + "/stylus/",
      content: sourceRoot + "/content/"
    },
    hml: {
      css: hmlRoot + "/css/",
      img: hmlRoot + "/img/"
    },
    prod: {
      css: prodRoot + "/css/",
      img: prodRoot + "/img/"
    }
  };
  gulp.task("browser-sync", function() {
    browserSync({
      browser: "google chrome",
      logLevel: "debug",
      logPrefix: "Homologation",
      notify: true,
      open: "external",
      port: 3000,
      server: {
        baseDir: hmlRoot,
        index: "index.html"
      }
    });
    gulp.watch(paths.source.jade + "**/*.jade", ["inline-css"]).on("change", browserSync.reload);
    gulp.watch(paths.source.stylus + "**/*.styl", ["inline-css"]).on("change", browserSync.reload);
  });
  gulp.task("jade", function() {
    gulp.src(paths.source.jade + "**/*.jade").pipe(plumber({
      errorHandler: notify.onError("Erro ao compilar o Jade: <%= error.message %>")
    })).pipe(data(function(file) {
      return require(paths.source.content + "/" + (path.basename(file.path, '.jade')) + ".json");
    })).pipe(jade({
      pretty: true
    })).pipe(gulp.dest(hmlRoot)).pipe(browserSync.stream());
  });
  gulp.task("stylus", function() {
    gulp.src(paths.source.stylus + "**/*.styl").pipe(plumber({
      errorHandler: notify.onError("Erro ao compilar o Stylus: <%= error.message %>")
    })).pipe(stylus({
      linenos: true
    })).pipe(changed(paths.hml.css, {
      extension: ".css",
      hasChanged: changed.compareSha1Digest
    })).pipe(gulp.dest(paths.hml.css)).pipe(browserSync.stream());
  });
  gulp.task("inline-css", ["stylus", "jade"], function() {
    setTimeout(function() {
      gulp.src(hmlRoot + "**/*.html").pipe(plumber({
        errorHandler: notify.onError("Erro ao deixar o CSS inline: <%= error.message %>")
      })).pipe(inlineCss({
        applyStyleTags: false,
        applyLinkTags: true,
        removeStyleTags: false,
        removeLinkTags: true
      })).pipe(changed(hmlRoot, {
        hasChanged: changed.compareSha1Digest
      })).pipe(gulp.dest(hmlRoot)).pipe(browserSync.stream());
    }, 1000);
  });
  gulp.task("clean", function() {
    return del([hmlRoot + "**/*.html", hmlRoot + "css", prodRoot + "*"], function(err, paths) {
      if (err) {
        console.log("Ouve um erro ao limpar as pastas: " + err);
        return;
      } else {
        console.log("Arquivos/pastas deletadas:\n", paths.join("\n"));
        return;
      }
    });
  });
  gulp.task("optmize-html", ["clean"], function() {
    gulp.src(paths.source.jade + "**/*.jade").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar o HTML: <%= error.message %>")
    })).pipe(data(function(file) {
      return paths.source.jsonContent + "/" + (path.basename(file.path)) + ".json";
    })).pipe(jade()).pipe(gulp.dest(prodRoot));
  });
  gulp.task("optmize-css", ["clean"], function() {
    gulp.src(paths.source.stylus + "**/*.styl").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar o CSS: <%= error.message %>")
    })).pipe(stylus({
      compress: true
    })).pipe(gulp.dest(paths.prod.css));
  });
  gulp.task("optmize-inline-css", ["optmize-css", "optmize-html"], function() {
    setTimeout(function() {
      gulp.src(prodRoot + "**/*.html").pipe(plumber({
        errorHandler: notify.onError("Erro ao deixar o CSS inline: <%= error.message %>")
      })).pipe(inlineCss({
        applyStyleTags: false,
        applyLinkTags: true,
        removeStyleTags: false,
        removeLinkTags: true
      })).pipe(gulp.dest(prodRoot));
    }, 1000);
  });
  gulp.task("optmize-images", ["clean"], function() {
    gulp.src(paths.hml.img + "{**/*.{jpg,png,gif},*.{jpg,png,gif}}").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar as imagens: <%= error.message %>")
    })).pipe(image()).pipe(gulp.dest("" + paths.prod.img));
  });
  gulp.task("default", ["browser-sync", "inline-css"]);
  return gulp.task("prod", ["optmize-inline-css", "optmize-images"]);
})();
