// Generated by CoffeeScript 1.10.0
(function() {
  var babel, browserSync, changed, data, del, es2015, gulp, hmlRoot, image, include, jade, nib, notify, path, paths, plumber, prodRoot, sourceRoot, stylus;
  gulp = require("gulp");
  del = require("del");
  path = require("path");
  browserSync = require("browser-sync");
  jade = require("gulp-jade");
  data = require("gulp-data");
  stylus = require("gulp-stylus");
  nib = require("nib");
  image = require("gulp-image");
  babel = require("gulp-babel");
  es2015 = require("babel-preset-es2015");
  plumber = require("gulp-plumber");
  notify = require("gulp-notify");
  changed = require("gulp-changed");
  include = require("gulp-include");
  sourceRoot = "./source/";
  hmlRoot = "./hml/";
  prodRoot = "./prod/";
  paths = {
    source: {
      jade: sourceRoot + "/jade/",
      stylus: sourceRoot + "/assets/stylus/",
      js: sourceRoot + "/assets/js/",
      content: sourceRoot + "/content/",
      includes: sourceRoot + "/includes/"
    },
    hml: {
      img: hmlRoot + "/assets/img/",
      css: hmlRoot + "/assets/css/",
      js: hmlRoot + "/assets/js/",
      font: hmlRoot + "/assets/font/"
    },
    prod: {
      img: prodRoot + "/assets/img/",
      css: prodRoot + "/assets/css/",
      js: prodRoot + "/assets/js/",
      font: prodRoot + "/assets/font/"
    }
  };
  gulp.task("browser-sync", function() {
    browserSync({
      browser: "google chrome",
      logLevel: "debug",
      logPrefix: "Homologation",
      notify: true,
      open: "external",
      port: 3000,
      server: {
        baseDir: hmlRoot,
        index: "index.html"
      }
    });
    gulp.watch([paths.source.jade + "**/*.jade", paths.source.includes + "**/*.jade", paths.source.content + "**/*.json"], ["jade"]).on("change", browserSync.reload);
    gulp.watch(paths.source.stylus + "**/*.styl", ["stylus"]).on("change", browserSync.reload);
    return gulp.watch(paths.source.js + "**/*.js", ["js"]).on("change", browserSync.reload);
  });
  gulp.task("jade", function() {
    return gulp.src(paths.source.jade + "**/*.jade").pipe(plumber({
      errorHandler: notify.onError("Erro ao compilar o jade: <%= error.message %>")
    })).pipe(data(function(file) {
      return require(paths.source.content + "/" + (path.basename(file.path, '.jade')) + ".json");
    })).pipe(jade({
      pretty: true,
      cache: false
    })).pipe(changed(hmlRoot, {
      extension: ".html",
      hasChanged: changed.compareSha1Digest
    })).pipe(gulp.dest(hmlRoot)).pipe(browserSync.stream());
  });
  gulp.task("stylus", function() {
    return gulp.src(paths.source.stylus + "**/*.styl").pipe(plumber({
      errorHandler: notify.onError("Erro ao compilar o Stylus: <%= error.message %>")
    })).pipe(stylus({
      use: nib(),
      linenos: true
    })).pipe(changed(paths.hml.css, {
      extension: ".css",
      hasChanged: changed.compareSha1Digest
    })).pipe(gulp.dest(paths.hml.css)).pipe(browserSync.stream());
  });
  gulp.task("js", function() {
    return gulp.src(paths.source.js + "**/*.js").pipe(plumber({
      errorHandler: notify.onError("Erro ao compilar o Javascript: <%= error.message %>")
    })).pipe(babel({
      presets: ["es2015"]
    })).pipe(include()).pipe(changed(paths.hml.js, {
      hasChanged: changed.compareSha1Digest
    })).pipe(gulp.dest(paths.hml.js)).pipe(browserSync.stream());
  });
  gulp.task("clean", function() {
    return del([prodRoot + "*", hmlRoot + "**/*.html", hmlRoot + "assets/css", hmlRoot + "assets/js"], function(err, paths) {
      console.log(err);
      if (err) {
        return console.log("Ocorreu um erro ao deletar os arquivos: ", err);
      } else {
        return console.log("Arquivos/pastas deletadas:\n", paths.join("\n"));
      }
    });
  });
  gulp.task("optmize-html", ["clean"], function() {
    return gulp.src(paths.source.jade + "**/*.jade").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar o HTML: <%= error.message %>")
    })).pipe(data(function(file) {
      return require(paths.source.content + "/" + (path.basename(file.path, '.jade')) + ".json");
    })).pipe(jade()).pipe(gulp.dest(prodRoot));
  });
  gulp.task("optmize-css", ["clean"], function() {
    return gulp.src(paths.source.stylus + "**/*.styl").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar o CSS: <%= error.message %>")
    })).pipe(stylus({
      compress: true,
      use: nib()
    })).pipe(gulp.dest(paths.prod.css));
  });
  gulp.task("optmize-js", ["clean"], function() {
    return gulp.src(paths.source.js + "**/*.js").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar o JS: <%= error.message %>")
    })).pipe(babel({
      presets: ["es2015"],
      compact: true,
      comments: false
    })).pipe(include()).pipe(gulp.dest(paths.prod.js));
  });
  gulp.task("optmize-images", ["clean"], function() {
    return gulp.src("./" + paths.hml.img + "{**/*.{jpg,png,gif,svg},*.{jpg,png,gif,svg}}").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar as imagens: <%= error.message %>")
    })).pipe(image()).pipe(gulp.dest("" + paths.prod.img));
  });
  gulp.task("optmize-fonts", ["clean"], function() {
    return gulp.src("./" + paths.hml.font + "{**/*.{eot,svg,ttf,woff,woff2},*.{eot,svg,ttf,woff,woff2}}").pipe(plumber({
      errorHandler: notify.onError("Erro ao otimizar as fontes: <%= error.message %>")
    })).pipe(gulp.dest("" + paths.prod.font));
  });
  gulp.task("default", ["browser-sync", "jade", "stylus", "js"]);
  return gulp.task("prod", ["optmize-html", "optmize-css", "optmize-js", "optmize-images", "optmize-fonts"]);
})();
